-- Initializing global variables to store the latest game state and game host process.
LatestGameState = LatestGameState or nil
Game = "hwGWYtb8Py953spgNdqcev-jkHfBwtQPSxhKO0lVyVY"
CRED = "Sa0iBLPNyJQrwpTTG-tWLQU-1QeUAJA73DdxGGiKoJc"

-- Checks if two points are within a given range.
-- @param x1, y1: Coordinates of the first point.
-- @param x2, y2: Coordinates of the second point.
-- @param range: The maximum allowed distance between the points.
-- @return: Boolean indicating if the points are within the specified range.

function inRange(x1, y1, x2, y2, range)
    return math.abs(x1 - x2) <= range and math.abs(y1 - y2) <= range
end

-- First point
local x1 = 3
local y1 = 4

-- Second point
local x2 = 6
local y2 = 8

-- Maximum allowed range
local maxRange = 5

-- Check if both points are within the maximum allowed range
if inRange(x1, y1, x2, y2, maxRange) then
    print("Both points are within the maximum allowed range.")
else
    print("Both points are not within the maximum allowed range.")
end

function decideNextAction()
    local player = {
        x = 5, 
        y = 5, 
        energy = 15 
    }
    local target = nil

    local otherPlayers = {
        { x = 6, y = 5, energy = 8 }, 
        { x = 8, y = 7, energy = 18 } 
        
    }

    -- Function to check if another player is within range
    local function inRange(x1, y1, x2, y2, range)
        local distanceSquared = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)
        return distanceSquared <= range * range
    end

    -- Function to recharge player's energy if it's less than 10
    local function rechargeEnergy()
        if player.energy < 10 then
            print("Player's energy is less than 10. Recharging energy...")
            player.energy = 15
        end
    end

    -- Check if any opponent player is within range
    for _, opponent in ipairs(otherPlayers) do
        if inRange(player.x, player.y, opponent.x, opponent.y, 1) then
            -- Check if opponent player's energy meets the conditions
            if opponent.energy <= 10 then
                -- Attack the nearest opponent player with energy less than or equal to 10
                print("Player is within range. Attacking...")
                return
            elseif opponent.energy > 15 then
                -- Retreat if there is an opponent player with energy greater than 15
                print("Opponent player has high energy. Retreating and seeking weaker player...")
                return
            end
        end
    end

    -- Recharge energy if it's less than 10
    rechargeEnergy()

    -- If no opponent player meets the conditions, move randomly
    print("No player in range or suitable conditions. Moving randomly.")
end

Handlers.add(
    "ReturnAttack", 
    Handlers.utils.hasMatchingTag("Action", "Hit"),
    function(msg) 
        local playerEnergy = 20

        local enemyEnergy = 15 

        if playerEnergy > 10 then
            
            print("Returning attack...")
            
        else
        print("Player has insufficient energy to return attack.")
         
        end
    end
)
Handlers.add(
    "StartTick",
    Handlers.utils.hasMatchingTag("Action", "Payment-Received"),
    function (msg)
print("Game started! Let the ticking begin!")
end
)
